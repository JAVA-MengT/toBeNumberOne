1.选择排序
public class ChooseSort1 {

    // i = 0 i < arr.length   j = i + 1; j < arr.length
    //选择排序思想：每次选择一个数，然后遍历其后的每一个数，和这个数比较
    //时间复杂度：O(N^2)
    //算法特点：排序时间和初始顺序无关，即使初始已经排好序了，也要耗费O(N^2)的时间
    public static void sortIntegers(int[] arr) {

        //边界值判断
        if (arr == null || arr.length <= 0){
            return;
        }

        for (int i = 0; i < arr.length; i++) {

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[i]){
                    int temp = arr[j];
                    arr[j] = arr[i];
                    arr[i] = temp;
                }

            }
        }
        for (int q = 0; q <arr.length ;q++){
            System.out.println(arr[q]);
        }

    }
        public static void main(String[] args){
        int arr[] = new int[]{9,8,6,3,4};
        sortIntegers(arr);
    }
}

2.插入排序
public class InsertSort2 {

    // i = 1 i < length j = i j > 0 j --   arr[j - 1]和arr [j]比较
    //插入排序思想：就像打牌时整理牌，小的插到左边，大的插到右边
    // 算法特点：最坏情况下时间复杂度O(N^2)
    // 依赖于初始排列顺序，特别适合于部分有序的数组，完全有序的情况下
    // 复杂度能达到O(N),但是逆序时效率降到O(N^2)

    // tips:第一点，边界检查的方式变为 如果为空或者只有一个，那么说明直接返回

    // tips:第二点：插入排序的特点是，数组没往前推进一个，就要和前面的整个 部分有序数组进行比较替换

    public static void sortIntegers(int[] arr) {

        if (arr == null || arr.length <= 1 ){
            return;
        }

        for (int i = 1; i < arr.length; i++) {

            for (int j = i; j > 0; j--) {
                if (arr[j - 1] > arr[j]){
                    int temp = arr[j - 1];
                    arr[j - 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
     }

    public static void main(String[] args){
        int arr[] = new int[]{8,9,5,12,3,1};
        sortIntegers(arr);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
}

3.冒泡排序
public class BubboSort3 {

    private static void bubboSort(int[] arr){
        //边界值判断
        if (arr == null || arr.length <= 1){
            return;
        }

        //每次相邻的进行对比,做一个标志位防止内部已经俨然有序
        //里面那一层才是两两比较的排序算法，减掉i是因为已经有i个排好序了，然后再减1的原因是 比如三个冒泡，只需要冒泡两次就能把最大的
        //移动到最后面

        boolean flag = true;

        for (int i = 0; i < arr.length && flag; i++) {
            flag = false;

            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]){
                    int temp = arr[j + 1];
                    arr[j + 1] = arr[j];
                    arr[j] = temp;
                    flag = true;
                }
            }
        }

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    public static void main(String[] args){
        int[] arr = new int[]{3,2,1};
        bubboSort(arr);
    }
}

4.归并排序
//归并排序
public class GBSort4 {

    // 归并排序
    // 归并排序:空间复杂度O(N)
    // 归并排序是稳定排序，它也是一种十分高效的排序，
    // 能利用完全二叉树特性的排序一般性能都不会太差。
    // java中Arrays.sort()采用了一种名为TimSort的排序算法，
    // 就是归并排序的优化版本。从上文的图中可看出，
    // 每次合并操作的平均时间复杂度为O(n)，
    // 而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。
    // 而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)

    // tips:注意几点归纳：
    // 1.不论sort还是merge方法 都是四个参数  （原数组，起始位置，终止位置，新开辟的数组）
    // 2.在merge方法中需要将已经部分排好序的数组 copy过去
    // 3.merge方法中的四个条件，推进游标，都是赋值给arr[k]
    /*public static void GBSort4(int[] arr) {
        //边界值条件判断
        if (arr == null || arr.length <= 1) {
            return;
        }
        int N = arr.length;

        //辅助用的aux函数，额外开辟的N空间的
        int[] aux = new int[N];

        sort(arr, 0, N - 1, aux);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }*/

    public static void main(String[] args) {
        GBSort(new int[]{4, 3, 2, 1});
    }

    public static void GBSort(int[] arr) {
        //边界值判断
       if (arr == null || arr.length <= 1){
           return;
       }

       int N = arr.length;
       //借助额外的N长度的空间
       int[] newArr = new int[N];

       sort(arr,0,N - 1,newArr);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }


    private static void sort(int[] arr, int start, int end, int[] newArr) {

        if (start >= end){
            return;
        }

        int mid = start + (end - start) / 2;
        sort(arr,start,mid,newArr);
        sort(arr,mid + 1,end,newArr);
        merge(arr,start,end,newArr);
    }

    //归并方法
    private static void merge(int[] arr, int start, int end, int[] newArr) {
        int leftIndex = start;
        int mid = start + (end - start) / 2;
        int rightIndex = mid + 1;

        for (int i = start; i <= end; i++){
            newArr[i] = arr[i];
        }

        for (int j = start;j <= end; j++){
            if (leftIndex > mid){
                arr[j] = newArr[rightIndex++];
            }else if (rightIndex > end){
                arr[j] = newArr[leftIndex++];
            }else if (newArr[leftIndex] < newArr[rightIndex]){
                arr[j] = newArr[leftIndex++];
            }else {
                arr[j] = newArr[rightIndex++];
            }
        }
    }
}

5.快速排序
//快速排序，不需要额外的o(n)的空间复杂度，他需要的是找到partition位置和前后指针替换
public class HurrySort5 {
    
    public static void main(String[] args){
        sortIntegers2(new int[]{5,4,3,1});
    }

    public static void sortIntegers2(int[] arr) {

        //边界值判断
        if (arr == null || arr.length <= 1){
            return;
        }

        int N = arr.length - 1;
        hurrySort(arr,0,N);

        //结果输出
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    private static void hurrySort(int[] arr, int s, int e) {

        if (s >= e){
            return;
        }

        int partition = partition(arr,s,e);
        hurrySort(arr,s,partition - 1);
        hurrySort(arr,partition + 1,e);
    }

    private static int partition(int[] arr, int s, int e) {

        int leftIndex = s;
        int rightIndex = e;

        //首次partition比较位置
        int temp = arr[s];

        while (leftIndex < rightIndex){
            while (leftIndex < rightIndex && arr[rightIndex] > temp){
                rightIndex --;
            }

            arr[leftIndex] = arr[rightIndex];

            while (leftIndex < rightIndex && arr[leftIndex] <temp){
                leftIndex ++;
            }
            arr[rightIndex] = arr[leftIndex];
        }

        arr[leftIndex] = temp;
        return leftIndex;
    }

}

6.反转链表
//翻转链表
public class ReverListNode6 {
    /**
     * @param head: The head of linked list.
     * @return: The new head of reversed linked list.
     */
    public static ListNode reverse(ListNode head) {
    // write your code here
        if (head == null || head.next == null) {
            return head;
        }

        //链表反转的意思也就是反转 指针的过程
        // 1-->2-->3-->null
        // 3-->2-->1-->null
       
        ListNode cur = head;
        ListNode pre = null;
        ListNode next = null;

       while (cur != null){
           next = cur.next;
           cur.next = pre;
           pre = cur;
           cur = next;
       }
       return pre;
    }

    public static class ListNode{

        private int val;

        private ListNode next;

        public ListNode(int val) {
            this.val = val;
        }

        public ListNode(int val, ListNode next){
            this.val = val;
            this.next = next;
        }

        public ListNode getNext() {
            return next;
        }

        public void setNext(ListNode next) {
            this.next = next;
        }

        public int getVal() {
            return val;
        }

        public void setVal(int val) {
            this.val = val;
        }

        @Override
        public String toString() {
            return "ListNode{" +
                    "next=" + next +
                    "val=" +val +
                    '}';
        }
    }

    public static void main(String[] args) {
        ListNode l1 = new ListNode(1);
        ListNode l2 = new ListNode(2);
        ListNode l3 = new ListNode(3);
        l1.setNext(l2);
        l2.setNext(l3);
        l3.setNext(null);

        ListNode reverse = reverse(l1);
        System.out.println(reverse);

        while (reverse.getNext() != null){
            System.out.println(reverse.getVal());
            reverse = reverse.next;
        }
    }
}

7.两个栈实现一个队列
//用两个栈实现一个队列
public class Myqueue7 {
    private Stack<Integer> stack1 = new Stack<>();

    private Stack<Integer> stack2 = new Stack<>();

    public void push(Integer ele) {
        
        stack1.push(ele);
    }

    public Integer pop() {
        if (stack1.isEmpty() && stack2.isEmpty()){
            throw new RuntimeException();
        }

        if (!stack2.isEmpty()){
            return stack2.pop();
        }else {
            while (stack1.size() != 1){
                stack2.push(stack1.pop());
            }
            return stack1.pop();
        }

    }

    public static void main(String[] args) {
        Myqueue7 q = new Myqueue7();
        q.push(1);q.push(2);q.push(3);q.push(4);q.push(5);

        Integer pop1 = q.pop();
        System.out.println(pop1);
        q.push(6);
        Integer pop2 = q.pop();
        System.out.println(pop2);
        Integer pop3 = q.pop();
        System.out.println(pop3);
        Integer pop4 = q.pop();
        System.out.println(pop4);
        Integer pop5 = q.pop();
        System.out.println(pop5);
        Integer pop6 = q.pop();
        System.out.println(pop6);
    }
}

8.TOPK
//TopK算法
public class Topk8 {

    //1.输入数组的元素是输入数组中出现频率大于k次的元素
    //2.输出数组需要按照元素出现频率的高低进行排序


    public static List<Integer> topKFrequent(int[] nums, int k){
        //边界值筛选
        if (nums == null || nums.length <= 0){
            throw new RuntimeException();
        }
        if (k < 0){
            throw new RuntimeException("当前频率k不能小于0");
        }

        //先统计出每个元素出现的频率
        HashMap<Integer,Integer> map = new HashMap(nums.length);

        for (int num : nums) {
            Integer integer = map.get(num);
            if (integer == null){
                map.put(num,1);
            }else {
                map.put(num,integer + 1);
            }
        }

        //将次数当成下标构建成一个数组
        List[] frequenceList = new ArrayList[nums.length];
        Set<Map.Entry<Integer, Integer>> entries = map.entrySet();
        for (Map.Entry<Integer, Integer> entry : entries) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            frequenceList[value] = new ArrayList();
            frequenceList[value].add(key);
        }

        //将已经按照次数存放的arryList倒序遍历，取出前K个里面包含的arryList
        List<Integer> result = new ArrayList<>();
        for (int i = frequenceList.length - 1; i > k; i--) {
            if (frequenceList[i] == null){
                continue;
            }
            result.addAll(frequenceList[i]);
        }
        return result;
    }
    public static void main(String[] args) {
        List<Integer> integers = topKFrequent(new int[]{8, 8, 8, 8,7, 7, 7, 2, 2}, 1);
        for (int i = 0; i < integers.size(); i++) {
            System.out.println(integers.get(i));
        }
    }
}
9.LRU
//实现LRU cache
public class LRUCache9 {

    LRUCacheMap lruCacheMap;

    public LRUCache9(int size){
        lruCacheMap = new LRUCacheMap(size);
    }

    public Object get(Object key){
        if (lruCacheMap.containsKey(key)){
            Object value = lruCacheMap.get(key);
            //先删除，然后重新移除
            lruCacheMap.remove(key);
            lruCacheMap.put(key,value);
            return value;
        }
        return null;
    }

    public void set(Object key,Object value){
        lruCacheMap.put(key,value);
    }

    public void entrySet(){
        Set<Map.Entry> set = lruCacheMap.entrySet();

        for (Map.Entry entry : set) {
            Object key = entry.getKey();
            Object value = entry.getValue();
            System.out.println(key + "====" + value);
        }
    }

    //缓存map
    public class LRUCacheMap extends LinkedHashMap{
        private int MAX;

        public LRUCacheMap(int max){
            this.MAX = max;
        }

        /**
         * 复写这个方法可以将cachemap的size定义好，并且超过这个size
         * 之后再出发put 或者putall 就会将100个中比较前面的给清除掉
         * @param eldest
         * @return
         */
        @Override
        protected boolean removeEldestEntry(Map.Entry eldest) {
            return size() > MAX;
        }



    }

    public static void main(String[] args) {
        LRUCache9 cache = new LRUCache9(3);

        cache.set("1","1");
        cache.set("2","2");
        cache.set("3","3");

        Object o = cache.get("4");
        cache.get("1");
        cache.get("2");

        //3-1-2
        //1-2-4
        cache.set("4","4");

        cache.entrySet();

    }
}
10.单链表的排序
//单链表的排序
public class LinkedSort10 {

    //指针结构
    private static class Node {
        //链表节点的数据
        int data;
        //链表指向的下一个节点的指针
        Node next = null;
        public Node(int data) {
            this.data = data;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }
    }

    public static Node quickSort(Node head){
        //边界值判断
        if (head == null || head.next == null){
            return head;
        }

        Node cur = head;
        int temp = 0;
        while (cur != null){
            int curData = cur.data;
            Node nextNode = cur.next;
            while (nextNode != null){
                int nextData = nextNode.data;
                if (curData > nextData){
                    temp = curData;
                    curData = nextData;
                    nextData = temp;

                    cur.data = curData;
                    nextNode.data = nextData;
                }
                nextNode = nextNode.next;
            }
            cur = cur.next;
        }
        return head;
    }

    public static void main(String[] args) {
        Node node1 = new Node(5);
        Node node2 = new Node(4);
        Node node3 = new Node(3);
        Node node4= new Node(2);
        node1.setNext(node2);
        node2.setNext(node3);
        node3.setNext(node4);
        Node node = quickSort(node1);

        while (node != null){
            System.out.println(node.data);
            node = node.next;
        }
    }
}

11.有序数组元素出现的次数
//给定有序数组中 给定元素出现次数 要求Logn
public class ArrayTimes11 {

    public static int sortTimes(int[] arr,int tartget,boolean flag){
        //边界条件判断
        if (arr == null || arr.length <= 0){
            return 0;
        }

        int start = 0;
        int end = arr.length - 1;
        int mid = 0;

        while (start + 1 < end){
            mid = start + (end - start) / 2;
            if (arr[mid] == tartget){
                if (flag){
                    end = mid;
                }else {
                    start = mid;
                }
            }else if (arr[mid] <tartget){
                start = mid;
            }else if (arr[mid] >tartget){
                end = mid;
            }
        }

        if (arr[start] == tartget){
            return start;
        }

        if (arr[end] == tartget){
            return end;
        }

        return start;

    }

    public static void main(String[] args) {
        int f = sortTimes(new int[]{1, 222, 222, 222, 2345, 7891, 7891, 6666}, 222,true);
        int end = sortTimes(new int[]{1, 222, 222, 222, 2345, 7891, 7891, 6666}, 222,false);
        System.out.println("一共出现了" + (end - f + 1));
    }
}

12.堆排序

public class DuiSort12 {

    //N代表数组的长度，i代表当做一个根节点然后开始进行堆话
    public static void treeBinfy(int arr[] ,int N, int i){

        //递归的跳出函数
        if (i >= N){
            return;
        }

        int left = 2 * i + 1;
        int right = 2 * i + 2;

        int max = i;

        if (left < N && arr[left] > arr[max]){
            max = left;
        }
        if (right < N && arr[right] > arr[max]){
            max = right;
        }
        //把大的数据换上去
        if (max != i){
            swap(arr,max,i);
            treeBinfy(arr,N,max);
        }

    }

    //交换出一个堆里面的最大值换到根节点上
    private static void swap(int[] arr,int max, int i) {
        int temp = arr[i];
        arr[i] = arr[max];
        arr[max] = temp;
    }

    private static void buildTree(int[] arr,int N){

        int lastNode = N - 1;
        int parentNode = (lastNode - 1) / 2;

        for (int i = parentNode; i >= 0; i--) {
            treeBinfy(arr,N,i);
        }
    }

    //将构建好的大根堆，每个根节点都与最后一个节点互换，然后砍断（代表树的元素减1）
    public static void heap_sort(int[] arr,int N){
        buildTree(arr,N);

        for (int i = N - 1; i >= 0; i--){
            swap(arr,i,0);
            treeBinfy(arr,i,0);
        }
    }

    public static void main(String[] args) {
        int newTree[] = {2,5,3,1,10,4};
        //treeBinfy(newTree,newTree.length,0);
        heap_sort(newTree,newTree.length);
        for (int i = 0; i < newTree.length; i++) {
            System.out.println(newTree[i]);
        }
    }

    public void treeBinfy1(int[] arr ,int n , int i){
        if (i >= n){
            return;
        }

        int left = 2 * i + 1;
        int right = 2 * i + 2;

        int max = i;

        if (left < n && arr[left] > arr[i]){
            max = left;
        }
        if (right < n && arr[right] >arr[i]){
            max = right;
        }

        if (max != i){
            swap(arr,max,i);
            treeBinfy1(arr,n,max);
        }
    }

    public void biildTree1(int[] arr,int n){
        int lastnode = n - 1;

        int parentnode = (lastnode - 1) / 2;

        for (int i = parentnode;i > 0; i --){
            treeBinfy(arr,n,i);
        }
    }

    public void heap_sort1(int[] arr,int n){
        biildTree1(arr,n);

        for (int i = n - 1; i > 0 ; i--){
            swap(arr,i,0);
            treeBinfy1(arr,i,0);
        }
    }
}

13.二叉树的先序-中序-后续+树的深度

//二叉树的先序-中序-后序遍历 +  获取树的深度
public class TreeTrace13 {

    //存放前序+中序+后序排列的集合
    private static List<Node> list = new ArrayList<Node>();

    //定义节点类：
    private static class Node{
        private String data;
        private Node lchid;//定义指向左子树的指针
        private Node rchild;//定义指向右子树的指针
        public Node(String data,Node lchild,Node rchild){
            this.data=data;
            this.lchid=lchild;
            this.rchild=rchild;
        }
    }

    //前序  根-》左-》右
    public static void preOrder(Node node){
        if (node == null){
            return;
        }
        list.add(node);
        if (node.lchid != null){
            preOrder(node.lchid);
        }
        if (node.rchild != null){
            preOrder(node.rchild);
        }
    }

    //中序 左-》根-》右
    public static void midOrder(Node node){
        if (node.lchid != null){
            midOrder(node.lchid);
        }
        list.add(node);
        if (node.rchild != null){
            midOrder(node.rchild);
        }
    }

    //后序 左-》右-》根
    public static void afterOrder(Node node){
        if (node.lchid != null){
            afterOrder(node.lchid);
        }
        if (node.rchild != null){
            afterOrder(node.rchild);
        }
        list.add(node);
    }

    /*1、如果一棵树只有一个结点，它的深度为1。
    2、如果根结点只有左子树而没有右子树，那么树的深度是其左子树的深度加1；
    3、如果根结点只有右子树而没有左子树，那么树的深度应该是其右子树的深度加1；
    4、如果既有右子树又有左子树，那该树的深度就是其左、右子树深度的较大值再加1。*/

    public static int getTreeDeepth(Node node){
        if (node.lchid == null && node.rchild == null){
            return 1;
        }

        int left = 0; int right = 0;
        if (node.lchid != null){
            left = getTreeDeepth(node.lchid);
        }
        if (node.rchild != null){
            right = getTreeDeepth(node.rchild);
        }
        return left > right ? left + 1 : right + 1;
    }

    public static class Solution {
        public List<String> PrintFromTopToBottom(Node root) {

            List<String> result = new ArrayList<>();
            if (root == null){
                return result;
            }

            Queue<Node> q = new LinkedList();
            q.offer(root);

            while (!q.isEmpty()){
                Node poll = q.poll();
                if (poll.lchid != null){
                    q.offer(poll.lchid);
                }
                if (poll.rchild != null){
                    q.offer(poll.rchild);
                }
                result.add(poll.data);
            }
            return result;
        }
    }

    public static void main(String[] args) {
        Node x=new Node("X",null,null);
        Node y=new Node("Y",null,null);
        Node d=new Node("d",x,y);
        Node e=new Node("e",null,null);
        Node f=new Node("f",null,null);
        Node c=new Node("c",e,f);
        Node b=new Node("b",d,null);
        Node a=new Node("a",b,c);

        preOrder(a);
        for (Node node : list) {
            System.out.println(node.data);
        }

    }
}

14.递归和非递归方式实现斐波那契函数

//递归和非递归方式实现斐波那契函数
public class Febonacheer14 {

    //递归方式的时间复杂度是o（2^n） 空间复杂度是o（n）
    public static int fbnq(int num){
        //边界值条件判断
        if (num <= 0 ){
            throw new RuntimeException();
        }

        if (num == 1 || num == 2){
            return 1;
        }else {
            return fbnq(num - 1) + fbnq(num - 2);
        }
    }

    //非递归方式
    public static int FDGfbnq(int num){
        //边界值条件判断
        if (num <= 0 ){
            throw new RuntimeException();
        }
        if (num == 1 || num == 2){
            return 1;
        }
        int pre = 1;
        int ppre = 0;
        int ret = 0;

        for(int i = 2;i <= num;i++){
            ret = ppre + pre;
            ppre = pre;
            pre = ret;
        }
        return ret;
    }

    //尾递归方式
    public static int WDGfbnq(int num,int ppre,int pre){
        //边界值条件判断
        if (num <= 0 ){
            throw new RuntimeException();
        }
        if (num < 2){
            return ppre;
        }
        int i = WDGfbnq(num - 1, pre, pre + ppre);
        return i;
    }

    public static void main(String[] args) {
        int fbnq = fbnq(6);
        int i = FDGfbnq(6);
        int i1 = WDGfbnq(6, 1, 1);
        System.out.println(fbnq);
        System.out.println(i);
        System.out.println(i1);
        Map map = new ConcurrentHashMap();
        final String pig = "length: 10";
        final String dog = "length: 10";
        System.out.println(pig == dog);

    }
}

15.判断链表是否有环

public class judgeLinkedListHuan15 {
    static LinkedList l = new LinkedList();


    public static class ListNode{

        private int val;

        private ListNode next;

        public ListNode(int val) {
            this.val = val;
        }

        public ListNode(int val, ListNode next){
            this.val = val;
            this.next = next;
        }

        public ListNode getNext() {
            return next;
        }

        public void setNext(ListNode next) {
            this.next = next;
        }

        public int getVal() {
            return val;
        }

        public void setVal(int val) {
            this.val = val;
        }

        @Override
        public String toString() {
            return "ListNode{" +
                    "next=" + next +
                    "val=" +val +
                    '}';
        }
    }

    public static Boolean judge(ListNode node){

        if (node == null || node.next == null){
            return false;
        }


        ListNode slow = node;
        ListNode fast = node;

        while (fast != null && fast.next != null){

            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast){
                return true;
            }

        }
        return false;

    }

    public static void main(String[] args) {
        l.size();
        ListNode l1 = new ListNode(1);
        ListNode l2 = new ListNode(2);
        ListNode l3 = new ListNode(3);
        ListNode l4 = new ListNode(4);


        l1.setNext(l2);
        l2.setNext(l3);
        l3.setNext(l4);

        Boolean judge = judge(l1);
        System.out.println(judge);
    }


}
